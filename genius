import React, { useState, useEffect } from 'react';
import {
  View,
  TouchableOpacity,
  Text,
  StyleSheet,
  Modal,
  Pressable,
} from 'react-native';

const colors = [
  '#e74c3c', '#f1c40f', '#2ecc71',
  '#3498db', '#9b59b6', '#1abc9c',
  '#e67e22', '#ecf0f1', '#95a5a6',
];

const GeniusGame = () => {
  const [sequence, setSequence] = useState([]);
  const [userInput, setUserInput] = useState([]);
  const [flashIndex, setFlashIndex] = useState(null);
  const [isShowing, setIsShowing] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [difficulty, setDifficulty] = useState('easy'); // 'easy', 'medium', 'hard'

  useEffect(() => {
    startGame();
  }, []);

  const getSpeed = () => {
    switch (difficulty) {
      case 'easy': return 1000;
      case 'medium': return 700;
      case 'hard': return 400;
      default: return 1000;
    }
  };

  const updateDifficulty = (len) => {
    if (len < 5) setDifficulty('easy');
    else if (len < 10) setDifficulty('medium');
    else setDifficulty('hard');
  };

  const startGame = () => {
    const first = Math.floor(Math.random() * 9);
    const newSequence = [first];
    updateDifficulty(newSequence.length);
    setSequence(newSequence);
    setUserInput([]);
    setGameOver(false);
    setTimeout(() => showSequence(newSequence), 500);
  };

  const showSequence = (seq) => {
    setIsShowing(true);
    seq.forEach((val, index) => {
      setTimeout(() => {
        setFlashIndex(val);
        setTimeout(() => setFlashIndex(null), getSpeed() / 2);
      }, index * getSpeed());
    });
    setTimeout(() => {
      setIsShowing(false);
    }, seq.length * getSpeed());
  };

  const handlePress = (index) => {
    if (isShowing) return;

    const newInput = [...userInput, index];
    setUserInput(newInput);

    if (index !== sequence[newInput.length - 1]) {
      setGameOver(true);
      return;
    }

    if (newInput.length === sequence.length) {
      const next = Math.floor(Math.random() * 9);
      const newSequence = [...sequence, next];
      updateDifficulty(newSequence.length);
      setSequence(newSequence);
      setUserInput([]);
      setTimeout(() => showSequence(newSequence), 1000);
    }
  };

  const renderRow = (start) => (
    <View style={styles.row}>
      {[0, 1, 2].map((i) => {
        const index = start + i;
        const isFlashing = flashIndex === index;
        return (
          <TouchableOpacity
            key={index}
            style={[
              styles.square,
              { backgroundColor: colors[index] },
              isFlashing && styles.activeSquare,
            ]}
            onPress={() => handlePress(index)}
            activeOpacity={0.8}
          />
        );
      })}
    </View>
  );

  return (
    <View style={styles.container}>
      {renderRow(0)}
      {renderRow(3)}
      {renderRow(6)}

      <Text style={styles.levelText}>
        Dificuldade: {difficulty.toUpperCase()} | Sequência: {sequence.length}
      </Text>

      <Modal
        animationType="fade"
        transparent={true}
        visible={gameOver}
        onRequestClose={() => {}}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalText}>Você errou!</Text>
            <Pressable style={styles.button} onPress={startGame}>
              <Text style={styles.buttonText}>Recomeçar Jogo</Text>
            </Pressable>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
    justifyContent: 'center',
    alignItems: 'center',
  },
  row: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  square: {
    width: 100,
    height: 100,
    margin: 5,
    borderRadius: 10,
  },
  activeSquare: {
    opacity: 0.3,
    borderWidth: 3,
    borderColor: '#ffffff',
  },
  levelText: {
    marginTop: 30,
    fontSize: 18,
    color: '#ffffff',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#000000aa',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#1e1e1e',
    padding: 30,
    borderRadius: 10,
    alignItems: 'center',
  },
  modalText: {
    fontSize: 24,
    color: 'white',
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#f44336',
    paddingVertical: 10,
    paddingHorizontal: 25,
    borderRadius: 8,
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
  },
});

export default GeniusGame;
